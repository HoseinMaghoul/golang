// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: helloworld/safe_key.proto

package safekey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SafeKeyProtoService_GenerateNewSafeKey_FullMethodName = "/SafeKeyProtoService/generate_new_safe_key"
	SafeKeyProtoService_GetSafeKey_FullMethodName         = "/SafeKeyProtoService/get_safe_key"
)

// SafeKeyProtoServiceClient is the client API for SafeKeyProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SafeKeyProtoServiceClient interface {
	GenerateNewSafeKey(ctx context.Context, in *SafeKeyNameProtoMessage, opts ...grpc.CallOption) (*HashKeyProtoMessage, error)
	GetSafeKey(ctx context.Context, in *HashKeyProtoMessage, opts ...grpc.CallOption) (*SafeKeyProtoMessage, error)
}

type safeKeyProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSafeKeyProtoServiceClient(cc grpc.ClientConnInterface) SafeKeyProtoServiceClient {
	return &safeKeyProtoServiceClient{cc}
}

func (c *safeKeyProtoServiceClient) GenerateNewSafeKey(ctx context.Context, in *SafeKeyNameProtoMessage, opts ...grpc.CallOption) (*HashKeyProtoMessage, error) {
	out := new(HashKeyProtoMessage)
	err := c.cc.Invoke(ctx, SafeKeyProtoService_GenerateNewSafeKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeKeyProtoServiceClient) GetSafeKey(ctx context.Context, in *HashKeyProtoMessage, opts ...grpc.CallOption) (*SafeKeyProtoMessage, error) {
	out := new(SafeKeyProtoMessage)
	err := c.cc.Invoke(ctx, SafeKeyProtoService_GetSafeKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SafeKeyProtoServiceServer is the server API for SafeKeyProtoService service.
// All implementations must embed UnimplementedSafeKeyProtoServiceServer
// for forward compatibility
type SafeKeyProtoServiceServer interface {
	GenerateNewSafeKey(context.Context, *SafeKeyNameProtoMessage) (*HashKeyProtoMessage, error)
	GetSafeKey(context.Context, *HashKeyProtoMessage) (*SafeKeyProtoMessage, error)
	mustEmbedUnimplementedSafeKeyProtoServiceServer()
}

// UnimplementedSafeKeyProtoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSafeKeyProtoServiceServer struct {
}

func (UnimplementedSafeKeyProtoServiceServer) GenerateNewSafeKey(context.Context, *SafeKeyNameProtoMessage) (*HashKeyProtoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNewSafeKey not implemented")
}
func (UnimplementedSafeKeyProtoServiceServer) GetSafeKey(context.Context, *HashKeyProtoMessage) (*SafeKeyProtoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSafeKey not implemented")
}
func (UnimplementedSafeKeyProtoServiceServer) mustEmbedUnimplementedSafeKeyProtoServiceServer() {}

// UnsafeSafeKeyProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SafeKeyProtoServiceServer will
// result in compilation errors.
type UnsafeSafeKeyProtoServiceServer interface {
	mustEmbedUnimplementedSafeKeyProtoServiceServer()
}

func RegisterSafeKeyProtoServiceServer(s grpc.ServiceRegistrar, srv SafeKeyProtoServiceServer) {
	s.RegisterService(&SafeKeyProtoService_ServiceDesc, srv)
}

func _SafeKeyProtoService_GenerateNewSafeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeKeyNameProtoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafeKeyProtoServiceServer).GenerateNewSafeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafeKeyProtoService_GenerateNewSafeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafeKeyProtoServiceServer).GenerateNewSafeKey(ctx, req.(*SafeKeyNameProtoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafeKeyProtoService_GetSafeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashKeyProtoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafeKeyProtoServiceServer).GetSafeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafeKeyProtoService_GetSafeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafeKeyProtoServiceServer).GetSafeKey(ctx, req.(*HashKeyProtoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SafeKeyProtoService_ServiceDesc is the grpc.ServiceDesc for SafeKeyProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SafeKeyProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SafeKeyProtoService",
	HandlerType: (*SafeKeyProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generate_new_safe_key",
			Handler:    _SafeKeyProtoService_GenerateNewSafeKey_Handler,
		},
		{
			MethodName: "get_safe_key",
			Handler:    _SafeKeyProtoService_GetSafeKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/safe_key.proto",
}
